#!/usr/bin/env python
# cspell:ignore Bambu
"""Common supporting classes and constants for slicer tools."""

from enum import StrEnum
from typing import NamedTuple

# create some type aliases
type SettingValue = str | list[str]
type SettingsDict = dict[str, SettingValue]

# Navigation and file name components
DEFAULT_ENCODING = "utf-8"

# json key elements
FROM = "from"
INHERITS = "inherits"
NAME = "name"


class PresetType(StrEnum):
    """Preset types used by Bambu Studio."""

    FILAMENT = "filament"
    MACHINE = "machine"
    PROCESS = "process"


class PresetGroup(StrEnum):
    """Preset groups used by Bambu Studio.

    System refers to presets from the system folder.
    User refers to presets from the user folder.
    Project refers to a filament, process or machine preset in a 3mf file.
    Override refers to the project settings from a 3mf file that override any of
    of the above (this is strictly also project preset, but as it is handled somewhat
    differently to the other presets by BBS, I've created a special category).
    """

    OVERRIDE = "override"
    PROJECT = "project"
    USER = "user"
    SYSTEM = "system"


class NodeMetadata(NamedTuple):
    """Summary metadata relating to Preset Nodes.

    Used for initialising PresetNodes and in generating complete settings lists from
    tree walk.
    """

    # Unique name for preset in project file.
    name: str
    # Source filename for the preset. Source file may contain multiple presets.
    filename: str
    group: PresetGroup
    preset_type: PresetType

    # The override_inherits field deals with an irritating quirk of project
    # overrides - they are defined as differences to a system preset. This system
    # preset is specified as the "inherits_group" value for the project override (i.e.
    # the parent for the differences is relative to the system preset named in
    # "inherits_group").
    #
    # However, in the Bambu Studio interface, orange highlighted values show differences
    # relative to the project specified immediate parent of the override, which may not
    # be the same as the system preset above! The immediate parent is named in:
    # "<printer|print|filament>_settings_id". (i.e. the project settings includes two
    # inheritance paths for overrides!)
    #
    # To capture this information in this package, we need to know both the system
    # preset and the immediate parent preset.
    #
    # I could have handled this by introducing a dummy key/value pair into the
    # the settings dictionary, but this would probably cause bigger problems with
    # end users trying to create a preset containing this dummy parameter.
    #
    # So instead we do a special here to handle the unicorn sparkly tears case
    # of project settings.
    #
    # override_inherits is the name of the immediate parent preset for the override. It
    # may be different from the "inherits" value used to generate
    # "differences_to_system" values.
    #
    # Defaults to empty string and should only be set for group = Preset.OVERRIDE.
    override_inherits: str = ""


class AllNodeSettings(NamedTuple):
    """Container for all of the settings for a preset node (from tree roll up)."""

    # metadata for the source/target node
    metadata: NodeMetadata
    # metadata for the reference node if defined.
    ref_metadata: NodeMetadata | None
    # Settings generated by walking the inheritance tree from the source/target node
    # up to but not including the reference node if defined, or all settings if
    # reference node is not defined).
    # In effect, these are the source node settings that are different to the reference
    # node settings.
    # (If reference settings exist, these settings either override or augment the
    # reference settings.)
    source_subtree: SettingsDict
    # Settings generated by walking the inheritance tree from the reference node to
    # the root of the inheritance tree.
    reference_subtree: SettingsDict
